<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on jdhao's blog</title><link>https://jdhao.github.io/tags/C++/</link><description>Recent content in C++ on jdhao's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>jdhao</copyright><lastBuildDate>Sun, 04 Jul 2021 19:02:50 +0800</lastBuildDate><atom:link href="https://jdhao.github.io/tags/C++/index.xml" rel="self" type="application/rss+xml"/><item><title>Cpp Container CheatSheet</title><link>https://jdhao.github.io/2021/07/04/cpp_container_cheatsheet/</link><pubDate>Sun, 04 Jul 2021 19:02:50 +0800</pubDate><guid>https://jdhao.github.io/2021/07/04/cpp_container_cheatsheet/</guid><description>&lt;p>I use Python in my work, and rarely need C++. So I need to compile this C++
cheatsheet for common STL containers just in case I need them.&lt;/p></description></item><item><title>Static and Dynamic Linkage in C++</title><link>https://jdhao.github.io/2021/07/04/static_and_dynamic_linking_cpp/</link><pubDate>Sun, 04 Jul 2021 01:02:33 +0800</pubDate><guid>https://jdhao.github.io/2021/07/04/static_and_dynamic_linking_cpp/</guid><description>&lt;p>In C++, we can build a library either statically or dynamically. In this post,
I want to summarize how to build a static and a shared/dynamic library&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p></description></item><item><title>Pretty Output Format in C++</title><link>https://jdhao.github.io/2021/07/04/pretty_fmt_in_cpp/</link><pubDate>Sun, 04 Jul 2021 00:26:30 +0800</pubDate><guid>https://jdhao.github.io/2021/07/04/pretty_fmt_in_cpp/</guid><description>&lt;p>Although &lt;code>std::cout&lt;/code> in C++ is powerful, it lacks the ease of use of &lt;a href="https://docs.python.org/3/tutorial/inputoutput.html#the-string-format-method">format
string&lt;/a> in Python. Fortunately, the 3rd party package &lt;a href="https://github.com/fmtlib/fmt">fmt&lt;/a>
provides a similar feature for C++.&lt;/p></description></item><item><title>Build C++ Project with CMake -- A Simple Example</title><link>https://jdhao.github.io/2020/12/12/build_opencv_project_with_cmake/</link><pubDate>Sat, 12 Dec 2020 11:07:21 +0800</pubDate><guid>https://jdhao.github.io/2020/12/12/build_opencv_project_with_cmake/</guid><description>&lt;p>For small projects, people tend to directly invoke the compiler with the
suitable options to build the program. While it is feasible, it is tedious to
type those compilation options and flags. For projects with multiple source
files and header files, it becomes inefficient to build by hand. On Linux,
people may write &lt;a href="http://web.mit.edu/gnu/doc/html/make_2.html">Makefile&lt;/a> and
build with &lt;a href="https://www.gnu.org/software/make/">make&lt;/a>. On Windows, people may
use Visual Studio for writing and build their project.&lt;/p></description></item><item><title>Building OpenCV from Source on Linux</title><link>https://jdhao.github.io/2020/12/07/build_opencv_cpp_library_linux/</link><pubDate>Mon, 07 Dec 2020 23:25:18 +0800</pubDate><guid>https://jdhao.github.io/2020/12/07/build_opencv_cpp_library_linux/</guid><description>&lt;p>In this post, I will summarize how to build OpenCV from source, and introduce
how to use it when writing C++ programs.&lt;/p></description></item><item><title>Setting up Neovim for C++ Development with LSP</title><link>https://jdhao.github.io/2020/11/29/neovim_cpp_dev_setup/</link><pubDate>Sun, 29 Nov 2020 23:55:52 +0800</pubDate><guid>https://jdhao.github.io/2020/11/29/neovim_cpp_dev_setup/</guid><description>&lt;p>In this post, I would like to share how to set up Neovim for writing simple C++
programs.&lt;/p></description></item><item><title>Set up for C++/C Development in Neovim</title><link>https://jdhao.github.io/2020/04/19/nvim_cpp_and_c_completion/</link><pubDate>Sun, 19 Apr 2020 18:17:56 +0800</pubDate><guid>https://jdhao.github.io/2020/04/19/nvim_cpp_and_c_completion/</guid><description>&lt;p>This post summarizes how to set up various plugins needed for C++/C code
editing, linting and formatting.&lt;/p></description></item><item><title>Commonly-used Building Options Explained</title><link>https://jdhao.github.io/2018/11/07/option_flag_meaning_build_packages_from_source/</link><pubDate>Wed, 07 Nov 2018 21:38:00 +0800</pubDate><guid>https://jdhao.github.io/2018/11/07/option_flag_meaning_build_packages_from_source/</guid><description>&lt;p>On Linux system, if we do not have root priviledge, we can not use package
managers to install a package to its default location (usually under &lt;code>/usr&lt;/code>).
Besides, the packages installed by the package managers are often too old to
have the latest features. Or, even if we have root priviledge, we do not want
to mess up with the system-wide packages and just want to experiment with a
package locally. On these ocassions, we may want to install the package to a
custom location.&lt;/p></description></item><item><title>A Complete Guide on Writing and Building C++ Programs in Sublime Text</title><link>https://jdhao.github.io/2018/03/28/sublime-cpp-build-system/</link><pubDate>Wed, 28 Mar 2018 21:54:23 +0800</pubDate><guid>https://jdhao.github.io/2018/03/28/sublime-cpp-build-system/</guid><description>&lt;p>In this post, I will show how to write and run simple C++ programs in &lt;a href="https://www.sublimetext.com/">Sublime
Text 3&lt;/a>.&lt;/p></description></item><item><title>对 Stack Overflow 的爱与恨</title><link>https://jdhao.github.io/2017/10/24/the-stackoverflow-love-and-hatred/</link><pubDate>Tue, 24 Oct 2017 19:46:51 +0800</pubDate><guid>https://jdhao.github.io/2017/10/24/the-stackoverflow-love-and-hatred/</guid><description>&lt;p>一直以来，在搜索编程、技术相关的问题时，Stack Overflow 上的答案经常高居谷歌返回结果前列，这个网站上有一些质量很高的答案，能够真正解决我的疑问。大约一年以前，我正式注册了 Stack Overflow 的会员，也开始试着回答别人的提问。解答别人的问题也让我受益匪浅，但最近发生的一件事却让我对 Stack Overflow 有了更深的认识。&lt;/p></description></item><item><title>What Is the Correct Way of Loop Through C++ Vector Using Index?</title><link>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</link><pubDate>Sat, 07 Oct 2017 23:38:41 +0800</pubDate><guid>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</guid><description>&lt;p>It might seem naive to ask how to loop through a C++ vector using index.
However, it is not: even experienced programmer may write buggy code to loop
through a vector.&lt;/p></description></item><item><title>Remainder Operator(%) in C++</title><link>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</link><pubDate>Sat, 07 Oct 2017 21:11:12 +0800</pubDate><guid>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</guid><description>&lt;p>What is value of &lt;code>a&lt;/code> and &lt;code>b&lt;/code> in the following statement according to the rules of C++ 11?&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">5&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you can not clearly tell the result, then you should update your knowledge
about % operator in C++.&lt;/p></description></item><item><title>小米 2018 校招算法工程师编程之字符串匹配</title><link>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</link><pubDate>Thu, 21 Sep 2017 22:07:03 +0800</pubDate><guid>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</guid><description>&lt;p>这是一道小米 2018 校园招聘算法工程师的编程题目，类似与正则表达式匹配，但是该题
不能使用 Python，因此需要自己实现这个简单的匹配，题目如下：&lt;/p></description></item><item><title>Some Programming Questions Related to Operations with Big Integers</title><link>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</link><pubDate>Thu, 21 Sep 2017 10:23:46 +0800</pubDate><guid>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</guid><description>&lt;p>The C++ standard library doesn&amp;rsquo;t support big integer operations such as
addition and multiplication. In this post, I will show how to solve such
problems in C++.&lt;/p></description></item><item><title>How to Compile and Install Latest Version of GCC on CentOS 7</title><link>https://jdhao.github.io/2017/09/04/install-gcc-newer-version-on-centos/</link><pubDate>Mon, 04 Sep 2017 22:41:10 +0800</pubDate><guid>https://jdhao.github.io/2017/09/04/install-gcc-newer-version-on-centos/</guid><description>&lt;p>The default GCC that comes with the CentOS 7.2 is GCC 4.8.5, which does not
support the complete C++11 standard, for example, it does not fully support
&lt;a href="http://en.cppreference.com/w/cpp/regex">regular expressions&lt;/a>. In order to use
regular expression functions, &lt;a href="https://stackoverflow.com/a/8061172/6064933">we need to install at least GCC
4.9.0&lt;/a>. The following installation
procedure is applicable to CentOS 7 and are not tested on other Linux systems.
Also you have to make sure that you have root privelege.&lt;/p></description></item><item><title>从二分搜索实现中的一个 bug 说起</title><link>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</link><pubDate>Sun, 27 Aug 2017 22:01:50 +0800</pubDate><guid>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</guid><description>&lt;h1 id="一道二分搜索问题">一道二分搜索问题&lt;/h1>
&lt;p>下午做了&lt;a href="https://leetcode.com/problems/first-bad-version/description/">一道 Leetcode 的编程题目&lt;/a>，牵扯出了二分搜索实现中需要特别注意的一个问题，题目如下&lt;/p></description></item></channel></rss>