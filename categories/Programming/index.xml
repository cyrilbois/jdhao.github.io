<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on jdhao&#39;s blog</title>
    <link>https://jdhao.github.io/categories/Programming/</link>
    <description>Recent content in Programming on jdhao&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>jdhao</copyright>
    <lastBuildDate>Thu, 19 Oct 2017 14:12:30 +0800</lastBuildDate>
    
	<atom:link href="https://jdhao.github.io/categories/Programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>几道算法问题解答</title>
      <link>https://jdhao.github.io/2017/10/19/mobike-programming-test-20171019/</link>
      <pubDate>Thu, 19 Oct 2017 14:12:30 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/10/19/mobike-programming-test-20171019/</guid>
      <description>&lt;p&gt;记录一下做的几道算法问题的解答。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What Is the Preferred Way of Loop Through C&#43;&#43; Vector Using Index?</title>
      <link>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</link>
      <pubDate>Sat, 07 Oct 2017 23:38:41 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/10/07/loop-forward-backward-with-cpp-vector/</guid>
      <description>&lt;p&gt;It might seem naive to ask how to loop through a C++ vector using index. But I
think it is not： even experienced programmer may write buggy code to loop
through a vector.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Remainder Operator(%) in C&#43;&#43;</title>
      <link>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</link>
      <pubDate>Sat, 07 Oct 2017 21:11:12 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/10/07/modulo-operator-in-cpp/</guid>
      <description>&lt;p&gt;What is value of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in the following statement according to the rules of C++ 11?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you can not clearly tell the result, then you should update your knowledge
about % operator in C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>堆排序是如何工作的？</title>
      <link>https://jdhao.github.io/2017/10/06/heap-sort-explained/</link>
      <pubDate>Fri, 06 Oct 2017 16:25:03 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/10/06/heap-sort-explained/</guid>
      <description>&lt;p&gt;本文将介绍堆 (heap)的概念，进一步介绍如何把普通数组变成最大堆，并在此基础上进行 堆排序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>When Does the Stability of Sorting Algorithms Matter?</title>
      <link>https://jdhao.github.io/2017/09/30/sorting-algorithms-stability/</link>
      <pubDate>Sat, 30 Sep 2017 15:34:55 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/09/30/sorting-algorithms-stability/</guid>
      <description>&lt;p&gt;In this post, I will write about the stability of sorting algorithms and why it
is important.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>小米 2018 校招算法工程师编程之字符串匹配</title>
      <link>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</link>
      <pubDate>Thu, 21 Sep 2017 22:07:03 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/09/21/xiaomi201818-pattern-match/</guid>
      <description>&lt;p&gt;这是一道小米 2018 校园招聘算法工程师的编程题目，类似与正则表达式匹配，但是该题
不能使用 Python，因此需要自己实现这个简单的匹配，题目如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Some Programming Questions Related to Operations with Big Integers</title>
      <link>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</link>
      <pubDate>Thu, 21 Sep 2017 10:23:46 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/09/21/big-integer-operations-cpp/</guid>
      <description>&lt;p&gt;The C++ standard library doesn&amp;rsquo;t support big integer operations such as
addition and multiplication. In this post, I will show how to solve such
problems in C++.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Find Longest Subarray Whose Sum Is Divisible by K</title>
      <link>https://jdhao.github.io/2017/09/01/longest-subarray-modulo-K/</link>
      <pubDate>Fri, 01 Sep 2017 00:05:38 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/09/01/longest-subarray-modulo-K/</guid>
      <description>&lt;p&gt;The problem is as follows:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given an array $A$ of length $N$, $A[i] \ge 0$ ( $0 \le i \le N-1$) , and a number $K$. Find the longest subarray whose sum is divisible by $K$, if there are no such subarray, return 0;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>从二分搜索实现中的一个 bug 说起</title>
      <link>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</link>
      <pubDate>Sun, 27 Aug 2017 22:01:50 +0800</pubDate>
      
      <guid>https://jdhao.github.io/2017/08/27/binary-search-overflow-issue/</guid>
      <description>&lt;h1 id=&#34;一道二分搜索问题&#34;&gt;一道二分搜索问题&lt;/h1&gt;
&lt;p&gt;下午做了&lt;a href=&#34;https://leetcode.com/problems/first-bad-version/description/&#34;&gt;一道 Leetcode 的编程题目&lt;/a&gt;，牵扯出了二分搜索实现中需要特别注意的一个问题，题目如下&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>