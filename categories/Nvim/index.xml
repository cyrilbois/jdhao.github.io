<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nvim on jdhao's blog</title><link>https://jdhao.github.io/categories/Nvim/</link><description>Recent content in Nvim on jdhao's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>jdhao</copyright><lastBuildDate>Thu, 05 Nov 2020 00:27:36 +0800</lastBuildDate><atom:link href="https://jdhao.github.io/categories/Nvim/index.xml" rel="self" type="application/rss+xml"/><item><title>Flake8 Config in Pyls for Code Linting.</title><link>https://jdhao.github.io/2020/11/05/pyls_flake8_setup/</link><pubDate>Thu, 05 Nov 2020 00:27:36 +0800</pubDate><guid>https://jdhao.github.io/2020/11/05/pyls_flake8_setup/</guid><description>&lt;p>In my &lt;a href="https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_LSP/">previous post&lt;/a>, I have go over the basic setup to make vim-lsp work.
However, I haven&amp;rsquo;t touch on an important part of writing code: linting. It
turns out that configure it correctly is harder than I thought.&lt;/p></description></item><item><title>Replace Deoplete-jedi with LSP Finally</title><link>https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_LSP/</link><pubDate>Wed, 04 Nov 2020 00:10:03 +0800</pubDate><guid>https://jdhao.github.io/2020/11/04/replace_deoplete_jedi_for_LSP/</guid><description>&lt;p>After using deoplete along with deoplete-jedi for more than two years, I have
finally decided to try something new for code completion. Yeah, you guess it,
the &lt;a href="https://langserver.org/">Language Server Protocol&lt;/a> (LSP in short).&lt;/p></description></item><item><title>Edit Multiple Files at once in Neovim</title><link>https://jdhao.github.io/2020/10/28/edit_multiple_files_nvim/</link><pubDate>Wed, 28 Oct 2020 00:21:30 +0800</pubDate><guid>https://jdhao.github.io/2020/10/28/edit_multiple_files_nvim/</guid><description>&lt;p>When I was in a folder and tried to edit mutiple files using glob pattern with the
following Neovim command:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="p">:&lt;/span>&lt;span class="nx">edit&lt;/span> *.&lt;span class="nx">vim&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I was surprised to find that Neovim gives the following error message:&lt;/p>
&lt;blockquote>
&lt;p>E77: Too many file names.&lt;/p>
&lt;/blockquote></description></item><item><title>Switching Buffers in Neovim with mapping</title><link>https://jdhao.github.io/2020/10/16/nvim_switch_buffer_with_mapping/</link><pubDate>Fri, 16 Oct 2020 23:31:37 +0800</pubDate><guid>https://jdhao.github.io/2020/10/16/nvim_switch_buffer_with_mapping/</guid><description>&lt;p>I usually use &lt;code>{num}Ctrl-6&lt;/code> to switch buffers in Neovim, where &lt;code>{num}&lt;/code> is the
number of buffer (see &lt;a href="https://jdhao.github.io/2018/09/29/Switching_buffers_quickly_Neovim/">this post&lt;/a>).
Since Neovim has builtin &lt;code>gt&lt;/code> mapping to switch between tabpages, I thought it
might be a good idea to use &lt;code>gb&lt;/code> as buffer switching shortcut avoid strech when
pressing &lt;code>Ctrl-6&lt;/code>.&lt;/p></description></item><item><title>How to Insert Unicode Characters in Neovim/Vim</title><link>https://jdhao.github.io/2020/10/07/nvim_insert_unicode_char/</link><pubDate>Wed, 07 Oct 2020 16:57:53 +0800</pubDate><guid>https://jdhao.github.io/2020/10/07/nvim_insert_unicode_char/</guid><description>&lt;p>Except those ASCII characters, it is often not straightforward to insert
Unicode characters into Vim/Neovim. Below I will summarize different ways to
enter Unicode character inside Neovim/Vim.&lt;/p></description></item><item><title>Nifty Nvim/Vim Techniques That Make My Life Easier -- Series 7</title><link>https://jdhao.github.io/2020/09/22/nifty_nvim_techniques_s7/</link><pubDate>Tue, 22 Sep 2020 22:39:15 +0800</pubDate><guid>https://jdhao.github.io/2020/09/22/nifty_nvim_techniques_s7/</guid><description>&lt;p>This post continues my &lt;a href="https://jdhao.github.io/2019/12/21/nifty_nvim_techniques_s6/">previous post&lt;/a>
on nifty Nvim/Vim techniques.&lt;/p></description></item><item><title>Highlight Groups Cleared after Starting Neovim</title><link>https://jdhao.github.io/2020/09/22/highlight_groups_cleared_in_nvim/</link><pubDate>Tue, 22 Sep 2020 22:30:16 +0800</pubDate><guid>https://jdhao.github.io/2020/09/22/highlight_groups_cleared_in_nvim/</guid><description>&lt;p>I want to use a custom highlight group for &lt;a href="https://neovim.io/doc/user/lua.html#lua-highlight">yank
highlighting&lt;/a>. Initially I
use the predefined highlight group &lt;code>IncSearch&lt;/code>. I thought it a bit dim and want
something brighter. So I defined the following highlight group:&lt;/p></description></item><item><title>Grammar Check in Neovim with LanguageTool</title><link>https://jdhao.github.io/2020/09/20/nvim_grammar_check_languagetool/</link><pubDate>Sun, 20 Sep 2020 22:47:19 +0800</pubDate><guid>https://jdhao.github.io/2020/09/20/nvim_grammar_check_languagetool/</guid><description>&lt;p>As a Neovim user who writes frequently, I want to use Neovim to check my
grammar before posting it in my blog. In this post, I will compare several
plugins used for grammar checking. Under the hood, they all use the opensource
tool &lt;a href="https://languagetool.org/">languagetool&lt;/a>.&lt;/p></description></item><item><title>LeaderF settings</title><link>https://jdhao.github.io/2020/08/26/leaderf_nvim_settings/</link><pubDate>Wed, 26 Aug 2020 23:24:20 +0800</pubDate><guid>https://jdhao.github.io/2020/08/26/leaderf_nvim_settings/</guid><description>&lt;p>&lt;a href="https://github.com/Yggdroot/LeaderF">LeaderF&lt;/a> is Vim/Neovim plugin to
fuzzy-search files, colorschemes, tags etc. quickly. It works across different
platforms flawlessly. Here are some of its settings to address minor issues.&lt;/p></description></item><item><title>Why You Should Use Snippets in Vim/Neovim</title><link>https://jdhao.github.io/2020/05/27/why_you_should_use_snippets_in_vim/</link><pubDate>Wed, 27 May 2020 22:46:19 +0800</pubDate><guid>https://jdhao.github.io/2020/05/27/why_you_should_use_snippets_in_vim/</guid><description>&lt;p>If you find yourself repeatedly type some similar-structured text in Vim/Nvim,
you need to ask yourself if there is a better way to do it.&lt;/p></description></item><item><title>Highlight Yanked Region in Nvim/Vim</title><link>https://jdhao.github.io/2020/05/22/highlight_yank_region_nvim/</link><pubDate>Fri, 22 May 2020 20:48:26 +0800</pubDate><guid>https://jdhao.github.io/2020/05/22/highlight_yank_region_nvim/</guid><description>&lt;p>&lt;strong>update (2020-09-19): update the settings for Nvim to reflect the latest
changes in API.&lt;/strong>&lt;/p>
&lt;p>In Vim or Neovim, showing the yanked region in color gives use visual feedback
on what we have copied. Here is how you can highlight yanked region in Vim or
Neovim.&lt;/p></description></item><item><title>Set up for C++/C Development in Neovim</title><link>https://jdhao.github.io/2020/04/19/nvim_cpp_and_c_completion/</link><pubDate>Sun, 19 Apr 2020 18:17:56 +0800</pubDate><guid>https://jdhao.github.io/2020/04/19/nvim_cpp_and_c_completion/</guid><description>&lt;p>This post summarizes how to set up various plugins needed for C++/C code
editing, linting and formatting.&lt;/p></description></item><item><title>Search and Replace in Multiple Files in Vim/Neovim</title><link>https://jdhao.github.io/2020/03/14/nvim_search_replace_multiple_file/</link><pubDate>Sat, 14 Mar 2020 23:20:06 +0800</pubDate><guid>https://jdhao.github.io/2020/03/14/nvim_search_replace_multiple_file/</guid><description>In Sublime-Text and other editors, we can press Ctrl-Shift-F to invoke the search and replace UI. We can also accomplish this task easily in Vim or Neovim with the builtin features. Here is how.
There are two steps involved in this task. The first step is to find the files containing the search pattern under the current project or directory. The second step is to perform replacement for each file found in 1st step.</description></item><item><title>Vim 和 Neovim 的前世今生</title><link>https://jdhao.github.io/2020/01/12/vim_nvim_history_development/</link><pubDate>Sun, 12 Jan 2020 11:48:43 +0800</pubDate><guid>https://jdhao.github.io/2020/01/12/vim_nvim_history_development/</guid><description>&lt;h1 id="引子">引子&lt;/h1>
&lt;p>从完全使用 &lt;a href="https://neovim.io/">Neovim&lt;/a> 进行日常&lt;a href="https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/">项目开发&lt;/a>与&lt;a href="https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/">文档写作&lt;/a>到现在，已经过去大约一年半的时间。一年半以前，我对 Vim 的了解还处在非常初级的阶段，甚至还不知道 Neovim，经过长时间的&lt;a href="https://jdhao.github.io/categories/Nvim/">使用与学习&lt;/a>，目前已经达到了熟练使用的程度。当然，Vim 的知识过于庞大，即便我已经使用了一年半的时间，还有很多 Vim/Neovim 的特性或者知识仍然有待了解与发掘。&lt;/p>
&lt;p>在使用 Neovim 的过程中，我对 Neovim 和 Vim 的历史以及它们之间的&lt;em>恩怨情仇&lt;/em>也产生了兴趣，散布在互联网上各处的博客、视频以及论坛讨论让我对过去的历史有了一定了解。&lt;/p></description></item><item><title>Vim/Nvim Number Arithmetic in Substitution</title><link>https://jdhao.github.io/2020/01/10/nvim_number_arithmetic_in_substitute/</link><pubDate>Fri, 10 Jan 2020 23:48:25 +0800</pubDate><guid>https://jdhao.github.io/2020/01/10/nvim_number_arithmetic_in_substitute/</guid><description>&lt;p>In this post, I want to share how to do number arithmetic quickly and get what
you want in specified format. More specifically, the topic is:&lt;/p>
&lt;blockquote>
&lt;p>How do we add, subtract, multiply or divide a value to each number in a
range?&lt;/p>
&lt;/blockquote></description></item><item><title>Regex Keyword and Python Interpolation in Ultisnips</title><link>https://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/</link><pubDate>Sun, 05 Jan 2020 18:52:03 +0800</pubDate><guid>https://jdhao.github.io/2020/01/05/ultisnips_python_interpolation/</guid><description>&lt;p>&lt;a href="">Vim-snippet&lt;/a> provides a lot of useful Ultisnips snippets for various
filetypes. For example, for Markdown, to insert level 1 header, the snippet
trigger is &lt;code>sec&lt;/code>, and for level 2 and 3 header, the triggers are &lt;code>ssec&lt;/code> and
&lt;code>sssec&lt;/code> respectively. These triggers are non-intuitive and hard to remember and
type.&lt;/p></description></item><item><title>Firenvim: Neovim inside Your Browser</title><link>https://jdhao.github.io/2020/01/01/firenvim_nvim_inside_browser/</link><pubDate>Wed, 01 Jan 2020 23:51:12 +0800</pubDate><guid>https://jdhao.github.io/2020/01/01/firenvim_nvim_inside_browser/</guid><description>&lt;p align="center">
&lt;img
src="https://blog-resource-1257868508.file.myqcloud.com/firenvim.gif">
&lt;/p>
&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Last year, I have written &lt;a href="https://jdhao.github.io/2019/05/11/nvim_text_input_browser/">a post&lt;/a>
on how to edit texts inside the browser using Vim/Nvim or browser extensions
which have Vim emulations. But none of them is satisfactory enough since they
are either not convenient to use or lacking features compared to real Neovim
empowered by various plugins.&lt;/p></description></item><item><title>Creating Markdown Front Matter with Ultisnips</title><link>https://jdhao.github.io/2019/12/22/ultisnips_avoid_content_update/</link><pubDate>Sun, 22 Dec 2019 13:45:25 +0800</pubDate><guid>https://jdhao.github.io/2019/12/22/ultisnips_avoid_content_update/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I write my blog posts in Markdown and build the blog using
&lt;a href="https://gohugo.io/">Hugo&lt;/a>. Hugo supports &lt;a href="https://gohugo.io/content-management/front-matter/">front matter&lt;/a>
for Markdown so that you can attach some metadata with a post, such as title,
date, tags, categories, etc.&lt;/p></description></item><item><title>Nifty Nvim Techniques That Make My Life Easier -- Series 6</title><link>https://jdhao.github.io/2019/12/21/nifty_nvim_techniques_s6/</link><pubDate>Sat, 21 Dec 2019 23:18:00 +0800</pubDate><guid>https://jdhao.github.io/2019/12/21/nifty_nvim_techniques_s6/</guid><description>&lt;p>This post continues my &lt;a href="https://jdhao.github.io/2019/11/11/nifty_nvim_techniques_s5/">previous post&lt;/a> on nifty Nvim/Vim techniques.&lt;/p></description></item><item><title>Running Command Asynchronously inside Neovim</title><link>https://jdhao.github.io/2019/12/09/vim_asynchronous_command_run/</link><pubDate>Mon, 09 Dec 2019 23:27:10 +0800</pubDate><guid>https://jdhao.github.io/2019/12/09/vim_asynchronous_command_run/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>When I am writing some prototyping code inside Neovim, I want to run the script
without going to the terminal and typing &lt;code>python toy_script.py&lt;/code>. Of course, we
can use &lt;code>:!python %&lt;/code> in the command line to run the script (see &lt;code>:h :!&lt;/code>). The
problem is that running external command will block Nvim/Vim, and we can not
move the cursor until the script finishes running.&lt;/p></description></item><item><title>A Hands-on Experience with Neovim's Builtin LSP Support</title><link>https://jdhao.github.io/2019/11/20/neovim_builtin_lsp_hands_on/</link><pubDate>Wed, 20 Nov 2019 22:41:16 +0800</pubDate><guid>https://jdhao.github.io/2019/11/20/neovim_builtin_lsp_hands_on/</guid><description>&lt;p>&lt;strong>Updated (2020-09-14): update lsp config to reflect the latest changes and add more plugins.&lt;/strong>&lt;/p>
&lt;p>Just a few days ago, the builtin &lt;a href="https://microsoft.github.io/language-server-protocol/">Language Server Protocol&lt;/a>
support &lt;a href="https://github.com/neovim/neovim/pull/11336">has been merged&lt;/a> into Neovim master.&lt;/p>
&lt;p>This post is a hands-on experience of setting up LSP support for Python with
the &lt;a href="https://github.com/palantir/python-language-server">python-language-server&lt;/a>.&lt;/p></description></item><item><title>File Backup in Neovim</title><link>https://jdhao.github.io/2019/11/16/nvim_file_backup/</link><pubDate>Sat, 16 Nov 2019 19:56:18 +0800</pubDate><guid>https://jdhao.github.io/2019/11/16/nvim_file_backup/</guid><description>&lt;p>There are several options related to back up in Vim/Nvim.&lt;/p>
&lt;ul>
&lt;li>&lt;code>backup&lt;/code>&lt;/li>
&lt;li>&lt;code>writebackup&lt;/code>&lt;/li>
&lt;li>&lt;code>backupdir&lt;/code>&lt;/li>
&lt;li>&lt;code>backupcopy&lt;/code>&lt;/li>
&lt;li>&lt;code>backupext&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Nifty Nvim Techniques That Make My Life Easier -- Series 5</title><link>https://jdhao.github.io/2019/11/11/nifty_nvim_techniques_s5/</link><pubDate>Mon, 11 Nov 2019 22:55:02 +0800</pubDate><guid>https://jdhao.github.io/2019/11/11/nifty_nvim_techniques_s5/</guid><description>&lt;p>This is the series 5 of my blog posts about some nifty techniques of using
Nvim, which continues the &lt;a href="https://jdhao.github.io/2019/09/17/nifty_nvim_techniques_s4/">previous
series here&lt;/a>.&lt;/p></description></item><item><title>Neovim Configuration for System-wide Use</title><link>https://jdhao.github.io/2019/11/10/install_config_neovim_system_wide/</link><pubDate>Sun, 10 Nov 2019 10:33:29 +0800</pubDate><guid>https://jdhao.github.io/2019/11/10/install_config_neovim_system_wide/</guid><description>&lt;p>I have been using Neovim for personal projects for over a year. Recently, I
want to set up Neovim system wide so that other users in the server can also
use my config if they want. In this post, I will describe the necessary
configurations.&lt;/p></description></item><item><title>Building A Vim Statusline from Scratch</title><link>https://jdhao.github.io/2019/11/03/vim_custom_statusline/</link><pubDate>Sun, 03 Nov 2019 14:22:20 +0800</pubDate><guid>https://jdhao.github.io/2019/11/03/vim_custom_statusline/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20191103144006.png">
&lt;/p>
&lt;p>I have been using &lt;a href="https://github.com/vim-airline/vim-airline">vim-airline&lt;/a> to
customize my Nvim statusline ever since I first started using Neovim. It works
great. Recently, I started &lt;a href="https://github.com/jdhao/minimal_vim">a repo&lt;/a> to
create a minimal configuration without external plugins for both Vim
and Neovim. During the process, I learned how to build the Vim statusline from
scratch.&lt;/p></description></item><item><title>Nifty Nvim Techniques That Make My Life Easier -- Series 4</title><link>https://jdhao.github.io/2019/09/17/nifty_nvim_techniques_s4/</link><pubDate>Tue, 17 Sep 2019 23:04:55 +0800</pubDate><guid>https://jdhao.github.io/2019/09/17/nifty_nvim_techniques_s4/</guid><description>&lt;p>This is the series 4 of my blog posts about some nifty techniques of using
Nvim, which continue my previous series
&lt;a href="https://jdhao.github.io/2019/05/14/nifty_nvim_techniques_s3/">here&lt;/a>.&lt;/p></description></item><item><title>How to Create Proper Folding for Vim/Nvim Configuration</title><link>https://jdhao.github.io/2019/08/16/nvim_config_folding/</link><pubDate>Fri, 16 Aug 2019 22:56:20 +0800</pubDate><guid>https://jdhao.github.io/2019/08/16/nvim_config_folding/</guid><description>&lt;p>&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190817223054.png" alt="Folded config">&lt;/p></description></item><item><title>How Do I Show the Current File Path In Neovim?</title><link>https://jdhao.github.io/2019/07/31/nvim_show_file_path/</link><pubDate>Wed, 31 Jul 2019 23:10:27 +0800</pubDate><guid>https://jdhao.github.io/2019/07/31/nvim_show_file_path/</guid><description>&lt;p>I saw on &lt;a href="https://vi.stackexchange.com/questions/104/how-can-i-see-the-full-path-of-the-current-file/20768#20768">StackExchange&lt;/a>
that someone asked about how to see the full path of current file in Vim. I
think it would be helpful to write about how I do it.&lt;/p></description></item><item><title>Fast Movement and Navigation Inside Vim or Neovim</title><link>https://jdhao.github.io/2019/06/26/movement_navigation_inside_nvim/</link><pubDate>Wed, 26 Jun 2019 22:51:43 +0800</pubDate><guid>https://jdhao.github.io/2019/06/26/movement_navigation_inside_nvim/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>One key spirit of Vim is to accomplish something in as fewer key strokes as
possible. When we repeat a command several times to perform an action, we need
to ask ourselves if there is a better way to do it. Only in this way, can we
make progress in mastering Vim. For example, to delete five lines of texts, if
we press &lt;code>dd&lt;/code> five times, we are certainly doing it the wrong way. After
looking up the Vim manual, we know that we can use &lt;code>5dd&lt;/code> or &lt;code>d4j&lt;/code>: only three
keystrokes are needed instead of ten!&lt;/p></description></item><item><title>Nvim Autocompletion with Deoplete</title><link>https://jdhao.github.io/2019/06/06/nvim_deoplete_settings/</link><pubDate>Thu, 06 Jun 2019 16:40:51 +0800</pubDate><guid>https://jdhao.github.io/2019/06/06/nvim_deoplete_settings/</guid><description>&lt;p>&lt;a href="https://github.com/Shougo/deoplete.nvim">Deoplete&lt;/a> is a good auto-completion
plugin for Neovim. In this post, I introduce how to set up auto-completion for
Nvim with the help of deoplete.&lt;/p></description></item><item><title>Exclusive and Inclusive Motion in Neovim/Vim</title><link>https://jdhao.github.io/2019/05/18/nvim_exclusive_inclusive_motion/</link><pubDate>Sat, 18 May 2019 01:18:28 +0800</pubDate><guid>https://jdhao.github.io/2019/05/18/nvim_exclusive_inclusive_motion/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>Suppose that we have the following text in normal mode (cursor is indicated by
&lt;code>^&lt;/code>):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">hello world
^
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we use &lt;code>dw&lt;/code>, we delete &lt;code>hello&amp;lt;Space&amp;gt;&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> and only &lt;code>world&lt;/code> is left; if we
use &lt;code>de&lt;/code>, &lt;code>hello&lt;/code> is deleted and &lt;code>&amp;lt;Space&amp;gt;world&lt;/code> is left. Have you ever wondered
about why &lt;code>dw&lt;/code> do not delete &lt;code>w&lt;/code> while &lt;code>de&lt;/code> will delete the &lt;code>o&lt;/code> in &lt;code>hello&lt;/code>? It
seems that motion &lt;code>e&lt;/code> and &lt;code>w&lt;/code> are somewhat inconsistent in their behaviours. It
turns out that it has something to do with the exclusivity of motions in Vim.&lt;/p></description></item><item><title>Nifty Nvim Techniques Which Make My Life Easier -- Series 3</title><link>https://jdhao.github.io/2019/05/14/nifty_nvim_techniques_s3/</link><pubDate>Tue, 14 May 2019 22:37:04 +0800</pubDate><guid>https://jdhao.github.io/2019/05/14/nifty_nvim_techniques_s3/</guid><description>&lt;p>This is the 3rd of my blog post series about some nifty techniques of using
Nvim. For other posts, see&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/">Series 1&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://jdhao.github.io/2019/04/17/nifty_nvim_techniques_s2/">Series 2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Create Mappings Which Take A Count in Neovim</title><link>https://jdhao.github.io/2019/04/29/nvim_map_with_a_count/</link><pubDate>Mon, 29 Apr 2019 23:08:16 +0800</pubDate><guid>https://jdhao.github.io/2019/04/29/nvim_map_with_a_count/</guid><description>&lt;p>&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190503204410.png" alt="Mappings">&lt;/p>
&lt;p>Many normal mode commands accept a &lt;code>count&lt;/code>, which means to repeat the motion
&lt;code>count&lt;/code> times. For example, &lt;code>3j&lt;/code> moves the cursor 3 lines below the current
line and &lt;code>4w&lt;/code> will move the cursor four words forward. Usually, the
user-defined mappings can not take a count. Even if they can, they will most
probably not work the way you expect them to. In this post, I will describe
what I have learned to make a fairly complex mapping repeatable with a count.&lt;/p></description></item><item><title>Spell Check in Nvim</title><link>https://jdhao.github.io/2019/04/29/nvim_spell_check/</link><pubDate>Mon, 29 Apr 2019 22:35:54 +0800</pubDate><guid>https://jdhao.github.io/2019/04/29/nvim_spell_check/</guid><description>&lt;p>In this post, I want to talk about how to enable the built-in spell check
feature in Nvim.&lt;/p></description></item><item><title>English Words Completion inside Neovim/Vim</title><link>https://jdhao.github.io/2019/04/26/words_completion_nvim/</link><pubDate>Fri, 26 Apr 2019 02:15:05 +0800</pubDate><guid>https://jdhao.github.io/2019/04/26/words_completion_nvim/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190430093054.png" alt="">
&lt;/p>
&lt;p>Some words are hard to type, it is handy if Neovim can provide auto-completion
for the words we are typing. We can achieve word completion in Neovim in two
ways.&lt;/p></description></item><item><title>How to Use Python Inside Vim Script with Neovim</title><link>https://jdhao.github.io/2019/04/22/mix_python_and_vim_script/</link><pubDate>Mon, 22 Apr 2019 16:05:10 +0800</pubDate><guid>https://jdhao.github.io/2019/04/22/mix_python_and_vim_script/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>I have been using &lt;a href="https://github.com/vim-airline/vim-airline">Vim-airline&lt;/a> for
a while to customize my statusline. We can change the theme used for statusline
with the many themes available in
&lt;a href="https://github.com/vim-airline/vim-airline-themes">vim-airline-themes&lt;/a>. Not
all these themes looks good since it depends on the background color you use
for Neovim and certainly your aesthetics.&lt;/p></description></item><item><title>Nifty Little Nvim Techniques to Make My Life Easier -- Series 2</title><link>https://jdhao.github.io/2019/04/17/nifty_nvim_techniques_s2/</link><pubDate>Wed, 17 Apr 2019 00:49:06 +0800</pubDate><guid>https://jdhao.github.io/2019/04/17/nifty_nvim_techniques_s2/</guid><description>&lt;p>This is the series 2 of the nifty Nvim techniques.&lt;/p>
&lt;ul>
&lt;li>For series 1, see &lt;a href="https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/">here&lt;/a>.&lt;/li>
&lt;/ul></description></item><item><title>Configuring Ultisnips for Neovim</title><link>https://jdhao.github.io/2019/04/17/neovim_snippet_s1/</link><pubDate>Wed, 17 Apr 2019 00:28:45 +0800</pubDate><guid>https://jdhao.github.io/2019/04/17/neovim_snippet_s1/</guid><description>&lt;p>If you have used Sublime Text before, you may be familiar with its
&lt;a href="http://sublimetext.info/docs/en/extensibility/snippets.html">snippet&lt;/a> feature.
&lt;a href="https://en.wikipedia.org/wiki/Snippet_(programming)">Snippets&lt;/a> let us type a
trigger word and expand it to some boilerplate code or texts that we do not
want to repeat typing. We will increase our efficiency dramatically with the
help of snippets.&lt;/p></description></item><item><title>Nifty Little Nvim Techniques to Make My Life Easier -- Series 1</title><link>https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/</link><pubDate>Thu, 28 Mar 2019 00:24:33 +0800</pubDate><guid>https://jdhao.github.io/2019/03/28/nifty_nvim_techniques_s1/</guid><description>&lt;p>In this post, I will summarize some nifty little techniques that make my
experience of editing in &lt;a href="https://github.com/neovim/neovim">Nvim&lt;/a> smoother.&lt;/p></description></item><item><title>A Complete Guide on Writing LaTeX with Vimtex in Neovim</title><link>https://jdhao.github.io/2019/03/26/nvim_latex_write_preview/</link><pubDate>Tue, 26 Mar 2019 22:54:43 +0800</pubDate><guid>https://jdhao.github.io/2019/03/26/nvim_latex_write_preview/</guid><description>&lt;p>Previously, I have written &lt;a href="https://jdhao.github.io/2018/03/10/sublime-text-latextools-setup/">a post&lt;/a>
on how to write and compile LaTeX source code in Sublime Text. Now that I am
familiar with Neovim, I want to do everything related to text editing inside
Neovim. In this post, I would like to share how to configure Neovim for LaTeX
editing and previewing.&lt;/p></description></item><item><title>Nvim-qt Settings on Windows 10</title><link>https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/</link><pubDate>Thu, 17 Jan 2019 22:04:05 +0800</pubDate><guid>https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/</guid><description>&lt;p>To run Neovim on Windows, you can either &lt;a href="https://jdhao.github.io/2018/11/15/neovim_configuration_windows/">use the terminal
Neovim&lt;/a> or
use a GUI for Neovim. If you use terminal Nvim, you may encounter various
annoying issues. Based on my experience, I recommend you using a GUI client for
Nvim instead of the terminal one.&lt;/p></description></item><item><title>Markdown Writing and Previewing in Neovim -- A Complete Guide</title><link>https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/</link><pubDate>Tue, 15 Jan 2019 15:27:57 +0800</pubDate><guid>https://jdhao.github.io/2019/01/15/markdown_edit_preview_nvim/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20200214144759.png" width="800">
&lt;/p></description></item><item><title>Line Number Settings for More Efficient Movement in Neovim</title><link>https://jdhao.github.io/2019/01/11/line_number_setting_nvim/</link><pubDate>Fri, 11 Jan 2019 20:25:31 +0800</pubDate><guid>https://jdhao.github.io/2019/01/11/line_number_setting_nvim/</guid><description>&lt;p>In this post, I would like to share line number settings in Neovim to move the
cursor more efficiently.&lt;/p></description></item><item><title>A Complete Guide to Neovim Configuration for Python Development on Linux</title><link>https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/</link><pubDate>Mon, 24 Dec 2018 00:14:00 +0800</pubDate><guid>https://jdhao.github.io/2018/12/24/centos_nvim_install_use_guide_en/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/Xnip2020-04-04_21-39-49.jpg" width="800">
&lt;/p>
&lt;p>&lt;strong>Updated: 2020-10-31&lt;/strong>&lt;/p></description></item><item><title>Windows 10 系统下 Neovim 安装与配置</title><link>https://jdhao.github.io/2018/11/16/neovim_configuration_windows-zh/</link><pubDate>Fri, 16 Nov 2018 01:02:37 +0800</pubDate><guid>https://jdhao.github.io/2018/11/16/neovim_configuration_windows-zh/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190119221237.png" width="600">
&lt;/p>
&lt;p>本篇文章介绍如何在 Windows 系统下安装并配置终端上的 &lt;a href="https://github.com/neovim/neovim">Neovim&lt;/a>。关于如何配置 Neovim 的 GUI 客户端 &lt;a href="https://github.com/equalsraf/neovim-qt">nvim-qt&lt;/a>，可以参考 &lt;a href="https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/">这篇博客&lt;/a>。&lt;/p></description></item><item><title>Neovim configuration on Windows 10</title><link>https://jdhao.github.io/2018/11/15/neovim_configuration_windows/</link><pubDate>Thu, 15 Nov 2018 18:08:00 +0800</pubDate><guid>https://jdhao.github.io/2018/11/15/neovim_configuration_windows/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/20190119221237.png" width="600">
&lt;/p>
&lt;p>&lt;strong>Updated: 2020-01-18&lt;/strong>&lt;/p>
&lt;p>In this post, I want to share how to install and configure terminal Neovim on
Windows 10&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. For configurations of
&lt;a href="https://github.com/equalsraf/neovim-qt">nvim-qt&lt;/a> on Windows, check &lt;a href="https://jdhao.github.io/2019/01/17/nvim_qt_settings_on_windows/">this post&lt;/a>.&lt;/p></description></item><item><title>An Introduction to Lookaround Regular Expression in Neovim/Vim</title><link>https://jdhao.github.io/2018/10/18/regular_expression_nvim/</link><pubDate>Thu, 18 Oct 2018 19:34:00 +0800</pubDate><guid>https://jdhao.github.io/2018/10/18/regular_expression_nvim/</guid><description>&lt;p>Today I want to use some regular expressions for searching and replacing in my
files. But I found that Nvim/Vim regular expression engine has its own flavor,
which is different from the regex engine used by Sublime Text&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. I ended up
learning some of the basics of Nvim-style regex. In this post, I want to share
about how to use lookaround&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> in Nvim.&lt;/p></description></item><item><title>The Fastest Way to Search A Keyword across the Project in Neovim</title><link>https://jdhao.github.io/2018/10/07/nvim_fast_keyword_search/</link><pubDate>Sun, 07 Oct 2018 17:34:01 +0800</pubDate><guid>https://jdhao.github.io/2018/10/07/nvim_fast_keyword_search/</guid><description>&lt;p>When we want to find out where a method is used across the whole project, how
do we do that in Nvim? Various tools are available, for example, &lt;a href="https://beyondgrep.com/documentation/">ack&lt;/a>,
&lt;a href="https://github.com/ggreer/the_silver_searcher">ag&lt;/a> or &lt;a href="https://github.com/BurntSushi/ripgrep">rg&lt;/a>.&lt;/p>
&lt;p>These are the 3 most popular tools to use. In the following post, I will
introduce how to install and use these packages in Neovim (Nvim).&lt;/p></description></item><item><title>How to Switch between Buffers Quickly in Neovim/Vim</title><link>https://jdhao.github.io/2018/09/29/Switching_buffers_quickly_Neovim/</link><pubDate>Sat, 29 Sep 2018 16:41:00 +0800</pubDate><guid>https://jdhao.github.io/2018/09/29/Switching_buffers_quickly_Neovim/</guid><description>&lt;p>When working on real projects using Neovim, we often open several files in a
window. Each file corresponds to a buffer. How to switch between these buffers
quickly?&lt;/p></description></item><item><title>How to Use Tagbar in Neovim</title><link>https://jdhao.github.io/2018/09/28/nvim_tagbar_install_use/</link><pubDate>Fri, 28 Sep 2018 12:17:03 +0800</pubDate><guid>https://jdhao.github.io/2018/09/28/nvim_tagbar_install_use/</guid><description>&lt;p>If you have a source file with hundreds or thousands of lines of code. How to
you see its structure and go to some classes or methods quickly in Nvim? The
solution is to use &lt;a href="https://github.com/majutsushi/tagbar">tagbar&lt;/a>.&lt;/p></description></item><item><title>Use Pylint for Code Checking inside Neovim</title><link>https://jdhao.github.io/2018/09/20/disable_warning_neomake_pylint/</link><pubDate>Thu, 20 Sep 2018 17:31:00 +0800</pubDate><guid>https://jdhao.github.io/2018/09/20/disable_warning_neomake_pylint/</guid><description>&lt;p>Pylint is a popular static code checker which can effectively find the possible
bugs in your source code. It is easy to install pylint with conda or pip:&lt;/p></description></item><item><title>Intro to Nvim File Explorer Plugin Nerdtree</title><link>https://jdhao.github.io/2018/09/10/nerdtree_usage/</link><pubDate>Mon, 10 Sep 2018 11:44:43 +0800</pubDate><guid>https://jdhao.github.io/2018/09/10/nerdtree_usage/</guid><description>&lt;p>&lt;a href="https://github.com/scrooloose/nerdtree">Nerdtree&lt;/a> is a file explorer for
Vim/Neovim. It will generate a file navigation window just like an IDE. We can
operate on files easily in the nerdtree window. In this post, I will summarize
some of its configurations and usages.&lt;/p></description></item><item><title>Linux 下 Neovim 配置 Python 开发环境指南</title><link>https://jdhao.github.io/2018/09/05/centos_nvim_install_use_guide/</link><pubDate>Wed, 05 Sep 2018 20:34:00 +0800</pubDate><guid>https://jdhao.github.io/2018/09/05/centos_nvim_install_use_guide/</guid><description>&lt;p align="center">
&lt;img src="https://blog-resource-1257868508.file.myqcloud.com/Xnip2020-04-04_21-39-49.jpg" width="800">
&lt;/p>
&lt;p>Vim 是一款主要流行于 *nix 系统上的强大的编辑器，另外一款可以与之媲美的编辑器是 Emacs，这两款编辑器广泛流行于程序员群体，&lt;a href="https://en.wikipedia.org/wiki/Editor_war">关于谁是编辑器之王的争论经久不息&lt;/a>。Vim 的功能虽然强大，但是作为一款「古老」的编辑器&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>，也不是没有缺点：随着 Vim 代码量的增加，维护变得日益困难，不利于快速增加新功能；另外，它的主要开发者目前只有一个人，&lt;a href="https://en.wikipedia.org/wiki/Bram_Moolenaar">Bram Moolenaar&lt;/a>，也不符合当今开源社区多人协作的习惯。为了克服 Vim 的这些缺点，保留 Vim 的优点（最大程度兼容 Vim），让 Vim 的开发能有更快的迭代速度，&lt;a href="https://neovim.io/">Neovim&lt;/a> 项目诞生了。本文介绍如何安装 Neovim 并配置 Python 开发环境(在以下叙述中，Neovim 和 Nvim 含义相同，不再加以区分)&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>。&lt;/p>
&lt;p>&lt;strong>我的完整 Neovim 配置可以在 &lt;a href="https://github.com/jdhao/nvim-config">这里&lt;/a> 查看。&lt;/strong>&lt;/p></description></item></channel></rss>